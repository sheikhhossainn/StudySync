"""
Django settings for studysync project.

Generated by 'django-admin startproject' using Django 4.2.7.

F# PostgreSQL Database Configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='studysync'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='11787898'),
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}ormation on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-me-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Parse ALLOWED_HOSTS and filter out empty strings
ALLOWED_HOSTS = [host.strip() for host in config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',') if host.strip()]

# Application definition
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'oauth2_provider',
    'social_django',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
]

LOCAL_APPS = [
    'accounts',
    'payments',
    'study_sessions',
    'mentorship',
    'core',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# Add debug toolbar for development
if DEBUG:
    INSTALLED_APPS += ['debug_toolbar']

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

# Add debug toolbar middleware for development
if DEBUG:
    MIDDLEWARE += ['debug_toolbar.middleware.DebugToolbarMiddleware']

ROOT_URLCONF = 'studysync.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'studysync.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

import dj_database_url

# Check if DATABASE_URL is provided (for production)
DATABASE_URL = config('DATABASE_URL', default=None)

if DATABASE_URL:
    # Production database configuration
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Development database configuration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME', default='studysync'),
            'USER': config('DB_USER', default='postgres'),
            'PASSWORD': config('DB_PASSWORD', default='password'),
            'HOST': config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432'),
        }
    }
# else:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql',
#             'NAME': config('DB_NAME', default='studysync_db'),
#             'USER': config('DB_USER', default='studysync_user'),
#             'PASSWORD': config('DB_PASSWORD', default='password'),
#             'HOST': config('DB_HOST', default='localhost'),
#             'PORT': config('DB_PORT', default='5432'),
#         }
#     }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Dhaka'  # Bangladesh timezone
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

# CORS Configuration
CORS_ALLOW_ALL_ORIGINS = DEBUG

# Parse CORS origins and filter out empty strings
cors_origins_config = config('CORS_ALLOWED_ORIGINS', default='')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_config.split(',') if origin.strip()]

# Development origins - including your Live Server port
if DEBUG:
    CORS_ALLOWED_ORIGINS += [
        'http://127.0.0.1:5500',   # Primary Live Server port (recommended)
        'http://localhost:5500',   # Alternative localhost
        'http://127.0.0.1:55982',  # Your previous Live Server port
        'http://localhost:55982',  # Alternative localhost
        'http://127.0.0.1:3000',   # React dev server
        'http://localhost:3000',   # Alternative localhost
    ]

# Ensure production domains are always included when not in DEBUG mode
if not DEBUG:
    production_origins = [
        'https://study-sync-teal.vercel.app',
        'https://studysync-frontend.vercel.app',
    ]
    # Add production origins if they're not already in the list
    for origin in production_origins:
        if origin not in CORS_ALLOWED_ORIGINS:
            CORS_ALLOWED_ORIGINS.append(origin)

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-goog-spa',
    'x-client-data',
]

CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for OAuth
CORS_ALLOW_PRIVATE_NETWORK = True
CORS_EXPOSE_HEADERS = ['content-length', 'x-my-custom-header']

# Payment API Configuration
PAYMENT_APIS = {
    'BKASH': {
        'BASE_URL': config('BKASH_BASE_URL', default='https://tokenized.sandbox.bka.sh/v1.2.0-beta'),
        'USERNAME': config('BKASH_USERNAME', default=''),
        'PASSWORD': config('BKASH_PASSWORD', default=''),
        'APP_KEY': config('BKASH_APP_KEY', default=''),
        'APP_SECRET': config('BKASH_APP_SECRET', default=''),
    },
    'NAGAD': {
        'BASE_URL': config('NAGAD_BASE_URL', default='https://sandbox.mynagad.com/api/dfs/check-out/v1'),
        'MERCHANT_ID': config('NAGAD_MERCHANT_ID', default=''),
        'PUBLIC_KEY': config('NAGAD_PUBLIC_KEY', default=''),
        'PRIVATE_KEY': config('NAGAD_PRIVATE_KEY', default=''),
    },
    'AAMARPAY': {
        'BASE_URL': config('AAMARPAY_BASE_URL', default='https://sandbox.aamarpay.com'),
        'STORE_ID': config('AAMARPAY_STORE_ID', default='aamarpaytest'),
        'SIGNATURE_KEY': config('AAMARPAY_SIGNATURE_KEY', default='dbb74894e82415a2f7ff0ec3a97e4183'),
    },
    'STRIPE': {
        'PUBLIC_KEY': config('STRIPE_PUBLIC_KEY', default=''),
        'SECRET_KEY': config('STRIPE_SECRET_KEY', default=''),
    }
}

# Individual Payment Gateway Settings (for backward compatibility)
BKASH_BASE_URL = PAYMENT_APIS['BKASH']['BASE_URL']
BKASH_USERNAME = PAYMENT_APIS['BKASH']['USERNAME']
BKASH_PASSWORD = PAYMENT_APIS['BKASH']['PASSWORD']
BKASH_APP_KEY = PAYMENT_APIS['BKASH']['APP_KEY']
BKASH_APP_SECRET = PAYMENT_APIS['BKASH']['APP_SECRET']

NAGAD_BASE_URL = PAYMENT_APIS['NAGAD']['BASE_URL']
NAGAD_MERCHANT_ID = PAYMENT_APIS['NAGAD']['MERCHANT_ID']
NAGAD_PUBLIC_KEY = PAYMENT_APIS['NAGAD']['PUBLIC_KEY']
NAGAD_PRIVATE_KEY = PAYMENT_APIS['NAGAD']['PRIVATE_KEY']

AAMARPAY_BASE_URL = PAYMENT_APIS['AAMARPAY']['BASE_URL']
AAMARPAY_STORE_ID = PAYMENT_APIS['AAMARPAY']['STORE_ID']
AAMARPAY_SIGNATURE_KEY = PAYMENT_APIS['AAMARPAY']['SIGNATURE_KEY']

STRIPE_PUBLIC_KEY = PAYMENT_APIS['STRIPE']['PUBLIC_KEY']
STRIPE_SECRET_KEY = PAYMENT_APIS['STRIPE']['SECRET_KEY']

# Debug Toolbar Configuration
if DEBUG:
    INTERNAL_IPS = [
        '127.0.0.1',
    ]

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'payments': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

# Security Settings for Production
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True

# JWT Configuration
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(hours=1),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7),
}

# Google OAuth Configuration for Vercel
GOOGLE_OAUTH2_CLIENT_ID = config('GOOGLE_OAUTH2_CLIENT_ID', default='1061988044539-0vq3h3fk08tjs9ncg63oetudgvt0onu8.apps.googleusercontent.com')
GOOGLE_OAUTH2_CLIENT_SECRET = config('GOOGLE_OAUTH2_CLIENT_SECRET', default='')

# Vercel Domain Configuration
VERCEL_DOMAIN = config('VERCEL_DOMAIN', default='your-app.vercel.app')
FRONTEND_URL = config('FRONTEND_URL', default='http://127.0.0.1:5500')  # Updated to standard Live Server port

# OAuth 2.0 Configuration
OAUTH2_PROVIDER = {
    'SCOPES': {
        'read': 'Read scope',
        'write': 'Write scope',
    },
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'REFRESH_TOKEN_EXPIRE_SECONDS': 3600 * 24 * 7,  # 1 week
    'AUTHORIZATION_CODE_EXPIRE_SECONDS': 600,
    'ROTATE_REFRESH_TOKEN': True,
}

# Social Authentication Settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config('GOOGLE_OAUTH2_CLIENT_ID', default='')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config('GOOGLE_OAUTH2_CLIENT_SECRET', default='')

SOCIAL_AUTH_FACEBOOK_KEY = config('FACEBOOK_APP_ID', default='')
SOCIAL_AUTH_FACEBOOK_SECRET = config('FACEBOOK_APP_SECRET', default='')

SOCIAL_AUTH_GITHUB_KEY = config('GITHUB_CLIENT_ID', default='')
SOCIAL_AUTH_GITHUB_SECRET = config('GITHUB_CLIENT_SECRET', default='')

# Social Auth Pipeline
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# Django Allauth Configuration
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'oauth2_provider.backends.OAuth2Backend',
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Allauth Settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USERNAME_REQUIRED = False
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Social Account Settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    },
    'facebook': {
        'METHOD': 'oauth2',
        'SCOPE': ['email', 'public_profile'],
        'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
        'INIT_PARAMS': {'cookie': True},
        'FIELDS': [
            'id',
            'email',
            'name',
            'first_name',
            'last_name',
            'verified',
            'locale',
            'timezone',
            'link',
            'gender',
            'updated_time',
        ],
        'EXCHANGE_TOKEN': True,
        'LOCALE_FUNC': lambda request: 'en_US',
        'VERIFIED_EMAIL': False,
        'VERSION': 'v13.0',
    },
    'github': {
        'SCOPE': [
            'user:email',
        ],
    }
}

# Payment Gateway Settings
# bKash Configuration
BKASH_BASE_URL = config('BKASH_BASE_URL', default='https://tokenized.sandbox.bka.sh/v1.2.0-beta')
BKASH_APP_KEY = config('BKASH_APP_KEY', default='')
BKASH_APP_SECRET = config('BKASH_APP_SECRET', default='')
BKASH_USERNAME = config('BKASH_USERNAME', default='')
BKASH_PASSWORD = config('BKASH_PASSWORD', default='')

# Nagad Configuration
NAGAD_BASE_URL = config('NAGAD_BASE_URL', default='https://api.mynagad.com:10043/remote-payment-gateway-1.0/api/dfs')
NAGAD_MERCHANT_ID = config('NAGAD_MERCHANT_ID', default='')
NAGAD_PUBLIC_KEY = config('NAGAD_PUBLIC_KEY', default='')
NAGAD_PRIVATE_KEY = config('NAGAD_PRIVATE_KEY', default='')

# Rocket Configuration
ROCKET_BASE_URL = config('ROCKET_BASE_URL', default='https://sandbox.rocketpay.com.bd/api/v1')
ROCKET_API_KEY = config('ROCKET_API_KEY', default='')
ROCKET_SECRET_KEY = config('ROCKET_SECRET_KEY', default='')

# Frontend URL for callbacks
FRONTEND_URL = config('FRONTEND_URL', default='http://localhost:5500')
